package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ParticipanteRepository userRepository;

    @Autowired
    MainService mainService;

    @DeleteMapping(path = "/deleteAll")
    public @ResponseBody
    void deleteAllUsers() {
        userRepository.deleteAll();
    }

    @PostMapping(path = "/findById")
    public @ResponseBody
    Participante getAllUsers(@RequestBody String nome) {
        return mainService.execute(nome);
    }

    @PostMapping(path = "/run")
    public ResponseEntity<?> main() {
        userRepository.deleteAll();
        List<String> participantes = new ArrayList<>();
        List<String> participantesASeremSorteados;

        List<Map<String, String>> sorteio = new ArrayList<>();
        participantes.add("Cely");
        participantes.add("Debora");
        participantes.add("Eglaize");
        participantes.add("Jussara");
        participantes.add("Nete");
        participantes.add("Neusa");
        participantes.add("Branca");
        participantesASeremSorteados = new ArrayList<>(participantes);

        List<String> eugeniaNaoPodeTirar = Arrays.asList("Stael", "Antonio", "Vera", "Rui");

        int maxAttemps = 50;
        Integer id = 0;
        for (String p : participantes) {
            if (p.equalsIgnoreCase(participantes.get(participantes.size() - 1))) {
                if (p.equalsIgnoreCase(participantesASeremSorteados.get(0))) {
                    main();
                }
            }
            boolean loop = true;
            String quemRetirou = null;
            int tent = 0;
            while (loop && tent < maxAttemps) {
                tent++;
                int randomNum = ThreadLocalRandom.current().nextInt(0, participantesASeremSorteados.size());
                if (!p.equalsIgnoreCase(participantesASeremSorteados.get(randomNum))) {
                    if ( (!"Eugenia".equalsIgnoreCase(p)) || ("Eugenia".equalsIgnoreCase(p) && !eugeniaNaoPodeTirar.contains(participantesASeremSorteados.get(randomNum)))) {
                        loop = false;
                        quemRetirou = participantesASeremSorteados.get(randomNum);
                        participantesASeremSorteados.remove(randomNum);
                        String senha = randomPassword();
                        System.out.println("Usuario: " + p + " Senha: " + senha);
                        userRepository.insert(++id, p, quemRetirou, senha, "nao");
                    } else {
                        System.out.println("Eugenia -> " + participantesASeremSorteados.get(randomNum));
                    }
                } else {
                    System.out.println(p + " -> " + participantesASeremSorteados.get(randomNum));
                }
            }
            HashMap<String, String> stringStringHashMap = new HashMap<>();

            stringStringHashMap.put(p, quemRetirou);
            sorteio.add(stringStringHashMap);
        }
        System.out.println("Terminou");
        return ResponseEntity.ok("Terminou");
    }

    @PostMapping(path = "/consultar")
    public @ResponseBody
    Iterable<Participante> consultar(@RequestBody String consulta) {
        String nome = consulta.split("&")[0].split("=")[1];
        String senha = consulta.split("&")[1].split("=")[1];
        Iterable<Participante> quemtirou = userRepository.findByNameAndSenha(nome, senha);
        if (quemtirou.iterator().hasNext()) {
            userRepository.updateConsultou(nome);
        }
        return quemtirou;
    }

    public static String randomPassword() {
        return UUID.randomUUID().toString().substring(0, 4);
    }
}
